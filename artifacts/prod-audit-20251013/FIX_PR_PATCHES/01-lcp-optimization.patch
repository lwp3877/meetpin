# Patch #1: LCP 최적화 (2.6s → <2.5s)

## 파일: src/app/layout.tsx

### 변경 사항: 추가 리소스 힌트

```diff
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -15,6 +15,9 @@ export default function RootLayout({
         <link rel="preconnect" href="https://xnrqfkecpabucnoxxtwa.supabase.co" />
         <link rel="dns-prefetch" href="https://xnrqfkecpabucnoxxtwa.supabase.co" />
         <link rel="preconnect" href="https://js.stripe.com" crossOrigin="anonymous" />
+
+        {/* LCP 최적화: Kakao Maps SDK preload */}
+        <link rel="preload" as="script" href="https://dapi.kakao.com/v2/maps/sdk.js" />
       </head>
       <body className={cn(
         "min-h-screen bg-background font-sans antialiased",
```

---

## 파일: next.config.js

### 변경 사항: 이미지 최적화 설정

```diff
--- a/next.config.js
+++ b/next.config.js
@@ -10,6 +10,17 @@ const nextConfig = {
       return config;
     },
   },
+
+  // 이미지 최적화 설정 강화
+  images: {
+    formats: ['image/webp', 'image/avif'],
+    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
+    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
+    minimumCacheTTL: 60 * 60 * 24 * 365, // 1년
+    dangerouslyAllowSVG: true,
+    contentDispositionType: 'attachment',
+    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
+  },
 };

 module.exports = nextConfig;
```

---

## 파일: src/components/landing/ProLanding.tsx (예시 - 실제 파일 확인 필요)

### 변경 사항: next/image 사용 및 priority 설정

```diff
--- a/src/components/landing/ProLanding.tsx
+++ b/src/components/landing/ProLanding.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import Image from 'next/image';

 export default function ProLanding() {
   return (
@@ -10,8 +11,15 @@ export default function ProLanding() {
         </p>
       </div>

-      <div className="hero-image">
-        <img src="/screenshots/map-view.png" alt="밋핀 지도 화면" />
+      <div className="hero-image relative w-full h-[600px]">
+        <Image
+          src="/screenshots/map-view.png"
+          alt="밋핀 지도 화면"
+          fill
+          priority  // LCP 이미지에 적용
+          quality={85}
+          className="object-cover"
+        />
       </div>
     </section>
   );
```

---

## 검증 명령어

```bash
# 1. 개발 서버 재시작
pnpm dev

# 2. Lighthouse 재측정 (3회 평균)
for i in {1..3}; do
  echo "Run $i:"
  npx lighthouse http://localhost:3001 --preset=desktop \
    --only-categories=performance --quiet \
    | grep "largest-contentful-paint"
done

# 3. 프로덕션 빌드 테스트
pnpm build
pnpm start

# 4. 프로덕션 Lighthouse
npx lighthouse https://meetpin-weld.vercel.app/ --preset=desktop

# 목표: LCP < 2.5s
```

---

## 예상 효과

- **LCP 개선**: 2.6s → 2.3s (예상)
- **이미지 로딩**: 25-35% 파일 크기 감소 (WebP/AVIF)
- **네트워크 대기 시간**: -100ms (preload/preconnect)

---

## 롤백 방법

```bash
git revert HEAD
pnpm build && pnpm start
```

---

## 추가 권장사항

1. **번들 분석 실행**:
   ```bash
   pnpm analyze:bundle
   ```
   - 큰 번들 식별 후 추가 code splitting

2. **이미지 감사**:
   ```bash
   # 큰 이미지 파일 찾기
   find public -type f \( -name "*.png" -o -name "*.jpg" \) -size +100k -exec ls -lh {} \;
   ```
   - 100KB 이상 이미지는 최적화 필수

3. **Redis 캐싱 확인**:
   - 환경변수 `UPSTASH_REDIS_REST_URL` 설정 여부 확인
   - 활성화 시 API 응답 시간 50-200ms 개선 예상
