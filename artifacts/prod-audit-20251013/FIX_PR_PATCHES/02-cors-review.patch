# Patch #2: CORS 정책 검토 및 강화 (선택적 적용)

## 배경

현재 프로덕션에서 `Access-Control-Allow-Origin: *` 헤더가 확인되었습니다.
이는 Vercel의 자동 설정일 가능성이 높으며, **정적 리소스에만 적용될 경우 문제 없습니다**.

**하지만 API 엔드포인트에도 적용될 경우 보안 위험이 있으므로 검토가 필요합니다.**

---

## 1단계: 현재 CORS 설정 확인

```bash
# API 엔드포인트 CORS 헤더 확인
curl -I -H "Origin: https://example.com" https://meetpin-weld.vercel.app/api/rooms
curl -I -H "Origin: https://example.com" https://meetpin-weld.vercel.app/api/profile

# 정적 리소스 CORS 헤더 확인
curl -I -H "Origin: https://example.com" https://meetpin-weld.vercel.app/icons/icon-192x192.png
curl -I -H "Origin: https://example.com" https://meetpin-weld.vercel.app/_next/static/...
```

### 판단 기준:
- **정적 리소스에만 `Access-Control-Allow-Origin: *`**: ✅ 문제 없음, 패치 불필요
- **API 엔드포인트에도 `Access-Control-Allow-Origin: *`**: ⚠️ 패치 적용 권장

---

## 2단계: API CORS 정책 강화 (조건부 적용)

### 파일: src/middleware.ts (신규 생성)

```typescript
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const response = NextResponse.next();

  // API 경로에만 명시적 CORS 설정
  if (request.nextUrl.pathname.startsWith('/api')) {
    const origin = request.headers.get('origin');

    const allowedOrigins = [
      'https://meetpin-weld.vercel.app',
      'https://meetpin.com',
      // 개발 환경
      process.env.NODE_ENV === 'development' && 'http://localhost:3001',
      process.env.NODE_ENV === 'development' && 'http://localhost:3000',
    ].filter(Boolean) as string[];

    // Origin이 허용 목록에 있을 경우에만 CORS 허용
    if (origin && allowedOrigins.includes(origin)) {
      response.headers.set('Access-Control-Allow-Origin', origin);
      response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
      response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      response.headers.set('Access-Control-Max-Age', '86400'); // 24시간
    }

    // Preflight 요청 처리
    if (request.method === 'OPTIONS') {
      return new NextResponse(null, {
        status: 204,
        headers: response.headers
      });
    }
  }

  return response;
}

export const config = {
  matcher: '/api/:path*',
};
```

---

## 3단계: 환경변수에 허용 도메인 추가 (선택적)

### 파일: .env.production

```diff
+# CORS 허용 도메인 (쉼표로 구분)
+ALLOWED_ORIGINS=https://meetpin-weld.vercel.app,https://meetpin.com
```

### 파일: src/middleware.ts (환경변수 사용)

```typescript
export function middleware(request: NextRequest) {
  const response = NextResponse.next();

  if (request.nextUrl.pathname.startsWith('/api')) {
    const origin = request.headers.get('origin');

    // 환경변수에서 허용 도메인 로드
    const allowedOrigins = (
      process.env.ALLOWED_ORIGINS ||
      'https://meetpin-weld.vercel.app'
    ).split(',');

    if (origin && allowedOrigins.includes(origin)) {
      response.headers.set('Access-Control-Allow-Origin', origin);
      // ... (나머지 동일)
    }
  }

  return response;
}
```

---

## 4단계: Vercel 설정 확인 (선택적)

### 파일: vercel.json

```json
{
  "headers": [
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "Access-Control-Allow-Origin",
          "value": "https://meetpin-weld.vercel.app"
        }
      ]
    },
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "Access-Control-Allow-Origin",
          "value": "*"
        }
      ]
    }
  ]
}
```

**주의**: `vercel.json`의 헤더 설정은 Next.js middleware보다 우선순위가 낮습니다.

---

## 검증 명령어

```bash
# 1. 허용된 Origin 테스트 (성공 예상)
curl -I -H "Origin: https://meetpin-weld.vercel.app" \
  https://meetpin-weld.vercel.app/api/rooms

# 예상 응답:
# Access-Control-Allow-Origin: https://meetpin-weld.vercel.app

# 2. 허용되지 않은 Origin 테스트 (차단 예상)
curl -I -H "Origin: https://malicious-site.com" \
  https://meetpin-weld.vercel.app/api/rooms

# 예상 응답:
# Access-Control-Allow-Origin 헤더 없음

# 3. 정적 리소스는 여전히 * 허용 (성공 예상)
curl -I https://meetpin-weld.vercel.app/icons/icon-192x192.png

# 예상 응답:
# Access-Control-Allow-Origin: *
```

---

## 롤백 방법

```bash
# middleware.ts 삭제 또는 비활성화
git revert HEAD
rm src/middleware.ts  # 또는
mv src/middleware.ts src/middleware.ts.disabled

pnpm build && vercel --prod
```

---

## 예상 효과

- **보안 강화**: CSRF 공격 벡터 감소
- **명시적 제어**: 허용 도메인 명확화
- **부작용 최소화**: 정적 리소스는 여전히 CDN 친화적

---

## 주의사항

1. **프론트엔드 호스팅 변경 시**: `ALLOWED_ORIGINS`에 새 도메인 추가 필요
2. **모바일 앱 개발 시**: 앱 도메인(또는 모든 Origin) 허용 필요
3. **로컬 개발**: `http://localhost:*` 자동 허용 확인

---

## 대안: API 엔드포인트별 세분화 (고급)

```typescript
// 특정 공개 API는 * 허용, 민감 API는 제한
export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // 공개 API (CORS *)
  if (pathname.startsWith('/api/health') || pathname.startsWith('/api/status')) {
    // CORS 제한 없음
    return NextResponse.next();
  }

  // 민감 API (CORS 제한)
  if (pathname.startsWith('/api/profile') || pathname.startsWith('/api/payments')) {
    // 엄격한 Origin 검증
    // ... (위와 동일)
  }

  return NextResponse.next();
}
```
