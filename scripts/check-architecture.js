#!/usr/bin/env node

/**
 * MeetPin Architecture Boundary Checker
 * ÏïÑÌÇ§ÌÖçÏ≤ò Í≤ΩÍ≥Ñ Í≤ÄÏÇ¨ Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const fs = require('fs')
const path = require('path')

const rules = [
  {
    name: 'API ÎùºÏö∞Ìä∏ÏóêÏÑú UI Ïª¥Ìè¨ÎÑåÌä∏ import Í∏àÏßÄ',
    pattern: /src\/app\/api\/.*\.ts$/,
    forbidden: ['@radix-ui/', 'lucide-react', '/components/ui/', '/components/'],
    reason: 'API ÎùºÏö∞Ìä∏Îäî ÏÑúÎ≤Ñ ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎßå Ïã§ÌñâÎêòÎØÄÎ°ú UI Ïª¥Ìè¨ÎÑåÌä∏Î•º importÌïòÎ©¥ ÏïàÎê©ÎãàÎã§.'
  },
  {
    name: 'lib Ìè¥ÎçîÏóêÏÑú Ïª¥Ìè¨ÎÑåÌä∏ import Í∏àÏßÄ',
    pattern: /src\/lib\/.*\.ts$/,
    forbidden: ['/components/', '@radix-ui/', 'lucide-react'],
    reason: 'lib Ìè¥ÎçîÎäî ÏàúÏàò Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎßå Ìè¨Ìï®Ìï¥Ïïº ÌïòÎØÄÎ°ú React Ïª¥Ìè¨ÎÑåÌä∏Î•º importÌïòÎ©¥ ÏïàÎê©ÎãàÎã§.'
  },
  {
    name: ' ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏÑúÎ≤Ñ Ï†ÑÏö© Ìå®ÌÇ§ÏßÄ import Í∏àÏßÄ',
    pattern: /src\/components\/.*\.tsx?$/,
    forbidden: ['server-only', 'ioredis', '@upstash/redis'],
    reason: 'ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑúÎäî ÏÑúÎ≤Ñ Ï†ÑÏö© Ìå®ÌÇ§ÏßÄÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.'
  }
]

function checkFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8')
  const violations = []

  for (const rule of rules) {
    if (rule.pattern.test(filePath)) {
      for (const forbidden of rule.forbidden) {
        const importRegex = new RegExp(`import.*['"]([^'"]*${forbidden.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}[^'"]*)['"]`, 'gm')
        let match
        while ((match = importRegex.exec(content)) !== null) {
          violations.push({
            file: filePath,
            rule: rule.name,
            import: match[1],
            reason: rule.reason,
            line: content.substring(0, match.index).split('\n').length
          })
        }
      }
    }
  }

  return violations
}

function walkDirectory(dir, violations = []) {
  const files = fs.readdirSync(dir)

  for (const file of files) {
    const fullPath = path.join(dir, file)
    const stat = fs.statSync(fullPath)

    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules' && file !== '_archive') {
      walkDirectory(fullPath, violations)
    } else if (file.endsWith('.ts') || file.endsWith('.tsx')) {
      const fileViolations = checkFile(fullPath)
      violations.push(...fileViolations)
    }
  }

  return violations
}

function main() {
  console.log('üèóÔ∏è  MeetPin ÏïÑÌÇ§ÌÖçÏ≤ò Í≤ΩÍ≥Ñ Í≤ÄÏÇ¨ ÏãúÏûë...\n')

  const violations = walkDirectory('src')

  if (violations.length === 0) {
    console.log('‚úÖ Î™®Îì† ÏïÑÌÇ§ÌÖçÏ≤ò Í∑úÏπôÏùÑ Ï§ÄÏàòÌïòÍ≥† ÏûàÏäµÎãàÎã§!')
    console.log('\nüìã Í≤ÄÏÇ¨Îêú Í∑úÏπô:')
    rules.forEach((rule, index) => {
      console.log(`${index + 1}. ${rule.name}`)
    })
    return
  }

  console.log(`‚ùå ${violations.length}Í∞úÏùò ÏïÑÌÇ§ÌÖçÏ≤ò Í∑úÏπô ÏúÑÎ∞òÏùÑ Î∞úÍ≤¨ÌñàÏäµÎãàÎã§:\n`)

  violations.forEach((violation, index) => {
    console.log(`${index + 1}. ${violation.file}:${violation.line}`)
    console.log(`   Í∑úÏπô: ${violation.rule}`)
    console.log(`   Î¨∏Ï†ú: import "${violation.import}"`)
    console.log(`   Ïù¥Ïú†: ${violation.reason}\n`)
  })

  process.exit(1)
}

if (require.main === module) {
  main()
}

module.exports = { checkFile, rules }