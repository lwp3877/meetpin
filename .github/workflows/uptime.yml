name: 📡 Uptime Monitor

on:
  schedule:
    # Every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  uptime-check:
    name: Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📡 Health check
        id: healthcheck
        run: |
          set -e

          echo "⏰ $(date): Starting health check..."

          # Health check with retries
          ATTEMPT=1
          MAX_ATTEMPTS=3
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
            echo "📡 Attempt $ATTEMPT/$MAX_ATTEMPTS..."

            if curl -fsS --max-time 10 --retry 2 --retry-delay 1 https://meetpin-weld.vercel.app/api/healthz; then
              echo "✅ Health check passed on attempt $ATTEMPT"
              SUCCESS=true
            else
              echo "❌ Health check failed on attempt $ATTEMPT"
              ATTEMPT=$((ATTEMPT + 1))
              [ $ATTEMPT -le $MAX_ATTEMPTS ] && sleep 5
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "🚨 All health check attempts failed"
            echo "failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "failed=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Calculate uptime stats
        if: steps.healthcheck.outputs.failed == 'false'
        run: |
          # Get workflow runs from last 24h
          RUNS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/uptime.yml/runs?per_page=100&created=>$(date -d '24 hours ago' -Iso-8601)" \
            | jq -r '.workflow_runs[] | select(.created_at > "'$(date -d '24 hours ago' -Iso-8601)'") | .conclusion')

          TOTAL_RUNS=$(echo "$RUNS" | wc -l)
          SUCCESS_RUNS=$(echo "$RUNS" | grep -c "success" || echo "0")

          if [ "$TOTAL_RUNS" -gt 0 ]; then
            UPTIME_PERCENT=$(echo "scale=2; $SUCCESS_RUNS * 100 / $TOTAL_RUNS" | bc -l || echo "0")
          else
            UPTIME_PERCENT="100"
          fi

          echo "📊 24h Uptime Statistics:"
          echo "   Total checks: $TOTAL_RUNS"
          echo "   Successful: $SUCCESS_RUNS"
          echo "   Uptime: ${UPTIME_PERCENT}%"

          # Add to job summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📊 24h Uptime Report

          | Metric | Value |
          |--------|-------|
          | **Uptime** | ${UPTIME_PERCENT}% |
          | **Successful Checks** | ${SUCCESS_RUNS}/${TOTAL_RUNS} |
          | **Last Check** | $(date) |
          | **Status** | ✅ Healthy |
          EOF

      - name: 🚨 Create incident issue on failure
        if: failure() && steps.healthcheck.outputs.failed == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'incident,uptime-failure'
            });

            const existingIssue = issues.find(issue =>
              issue.title.includes('Uptime failure') && issue.state === 'open'
            );

            const failureTime = new Date().toISOString();
            const issueBody = `## 🚨 Uptime Failure Detected

            **Failure Time**: ${failureTime}
            **Endpoint**: https://meetpin-weld.vercel.app/api/healthz
            **Workflow**: [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ### Automatic Actions Taken
            - [x] 3 retry attempts executed
            - [x] Incident issue created
            - [ ] Manual investigation required

            ### Next Steps
            1. Check Vercel deployment status
            2. Verify Supabase connectivity
            3. Review application logs
            4. Consider rollback if needed

            This issue will be automatically closed when health checks pass.`;

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Uptime failure detected - ${failureTime}`,
                body: issueBody,
                labels: ['incident', 'uptime-failure', 'priority:high'],
                assignees: ['lwp3877'] // Replace with actual maintainer
              });
              console.log('✅ Incident issue created');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `🚨 **Additional failure detected**: ${failureTime}\n\nFailure continues. Manual intervention may be required.`
              });
              console.log('✅ Updated existing incident issue');
            }

      - name: 🔄 Close resolved incident issues
        if: success() && steps.healthcheck.outputs.failed == 'false'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'incident,uptime-failure'
            });

            const recoveryTime = new Date().toISOString();

            for (const issue of issues) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Service Recovered**: ${recoveryTime}\n\nHealth checks are now passing. Auto-closing incident.`
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

            if (issues.length > 0) {
              console.log(`✅ Closed ${issues.length} resolved incident issue(s)`);
            }