# Synthetic 모니터링 워크플로우
# 10분마다 프로덕션 사이트 상태 확인

name: 🚨 Synthetic Monitoring

on:
  schedule:
    # 10분마다 실행 (*/10 * * * *)
    - cron: '*/10 * * * *'
  workflow_dispatch: # 수동 실행 가능
  
env:
  PROD_DOMAIN: meetpin-weld.vercel.app # 프로덕션 도메인
  TIMEOUT_SECONDS: 30
  
jobs:
  synthetic-monitoring:
    name: 업타임 및 성능 모니터링
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
        
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 🏠 홈페이지 상태 확인
        id: check-home
        run: |
          echo "🏠 홈페이지 체크 중..."
          
          # 응답시간 및 상태코드 확인
          RESPONSE=$(curl -w "%{http_code},%{time_total},%{time_connect}" \
                          -s -o /dev/null \
                          --max-time ${{ env.TIMEOUT_SECONDS }} \
                          https://${{ env.PROD_DOMAIN }}/ || echo "000,999,999")
          
          HTTP_CODE=$(echo $RESPONSE | cut -d',' -f1)
          RESPONSE_TIME=$(echo $RESPONSE | cut -d',' -f2)
          CONNECT_TIME=$(echo $RESPONSE | cut -d',' -f3)
          
          echo "status_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          echo "connect_time=$CONNECT_TIME" >> $GITHUB_OUTPUT
          
          echo "📊 홈페이지 결과: HTTP $HTTP_CODE, 응답시간 ${RESPONSE_TIME}s"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ 홈페이지 실패: HTTP $HTTP_CODE"
            exit 1
          fi
          
          # 응답시간 경고 (5초 초과)
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ 느린 응답시간: ${RESPONSE_TIME}s"
            echo "slow_response=true" >> $GITHUB_OUTPUT
          fi
          
      - name: 🗺️ 지도 페이지 상태 확인  
        id: check-map
        run: |
          echo "🗺️ 지도 페이지 체크 중..."
          
          RESPONSE=$(curl -w "%{http_code},%{time_total}" \
                          -s -o /dev/null \
                          --max-time ${{ env.TIMEOUT_SECONDS }} \
                          https://${{ env.PROD_DOMAIN }}/map || echo "000,999")
          
          HTTP_CODE=$(echo $RESPONSE | cut -d',' -f1)
          RESPONSE_TIME=$(echo $RESPONSE | cut -d',' -f2)
          
          echo "status_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          
          echo "📊 지도 페이지 결과: HTTP $HTTP_CODE, 응답시간 ${RESPONSE_TIME}s"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ 지도 페이지 실패: HTTP $HTTP_CODE"
            exit 1
          fi
          
      - name: 🏥 헬스체크 API 확인
        id: check-health
        run: |
          echo "🏥 헬스체크 API 체크 중..."
          
          # JSON 응답 파싱 포함
          HEALTH_RESPONSE=$(curl -s --max-time ${{ env.TIMEOUT_SECONDS }} \
                                 https://${{ env.PROD_DOMAIN }}/api/healthz || echo '{"status":"error"}')
          
          HTTP_CODE=$(curl -w "%{http_code}" -s -o /dev/null \
                           --max-time ${{ env.TIMEOUT_SECONDS }} \
                           https://${{ env.PROD_DOMAIN }}/api/healthz || echo "000")
          
          echo "status_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "📊 헬스체크 결과: HTTP $HTTP_CODE"
          
          # JSON에서 status 추출
          HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "error"')
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_CODE" != "200" ] || [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "❌ 헬스체크 실패: HTTP $HTTP_CODE, Status: $HEALTH_STATUS"
            echo "$HEALTH_RESPONSE" | jq '.' || echo "$HEALTH_RESPONSE"
            exit 1
          fi
          
      - name: 🔒 보안 헤더 확인
        id: check-security
        run: |
          echo "🔒 보안 헤더 체크 중..."
          
          # 필수 보안 헤더 확인
          HEADERS=$(curl -I -s --max-time ${{ env.TIMEOUT_SECONDS }} \
                         https://${{ env.PROD_DOMAIN }}/ || echo "")
          
          # CSP 헤더 확인
          if echo "$HEADERS" | grep -i "content-security-policy" > /dev/null; then
            echo "✅ CSP 헤더 존재"
            echo "csp_present=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ CSP 헤더 누락"
            echo "csp_present=false" >> $GITHUB_OUTPUT
          fi
          
          # X-Frame-Options 확인  
          if echo "$HEADERS" | grep -i "x-frame-options" > /dev/null; then
            echo "✅ X-Frame-Options 헤더 존재"
            echo "xframe_present=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ X-Frame-Options 헤더 누락"
            echo "xframe_present=false" >> $GITHUB_OUTPUT
          fi
          
          # X-Content-Type-Options 확인
          if echo "$HEADERS" | grep -i "x-content-type-options" > /dev/null; then
            echo "✅ X-Content-Type-Options 헤더 존재"
          else
            echo "⚠️ X-Content-Type-Options 헤더 누락"
          fi
          
      - name: 📊 모니터링 결과 요약
        if: always()
        run: |
          echo "🎯 Synthetic 모니터링 결과 요약"
          echo "=================================="
          echo "홈페이지: HTTP ${{ steps.check-home.outputs.status_code }}, ${​{ steps.check-home.outputs.response_time }}s"
          echo "지도페이지: HTTP ${{ steps.check-map.outputs.status_code }}, ${​{ steps.check-map.outputs.response_time }}s"  
          echo "헬스체크: HTTP ${{ steps.check-health.outputs.status_code }}, ${{ steps.check-health.outputs.health_status }}"
          echo "CSP 헤더: ${{ steps.check-security.outputs.csp_present }}"
          echo "X-Frame: ${{ steps.check-security.outputs.xframe_present }}"
          echo "=================================="
          
      - name: 📧 실패 시 Slack 알림
        if: failure()
        run: |
          # Slack 웹훅이 설정된 경우에만 전송
          if [ -n "${{ secrets.SYNTHETIC_SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
                 --data "{
                   \"text\": \"🚨 밋핀 서비스 장애 감지\",
                   \"blocks\": [
                     {
                       \"type\": \"section\",
                       \"text\": {
                         \"type\": \"mrkdwn\",
                         \"text\": \"*🚨 밋핀 Synthetic 모니터링 실패*\\n\\n• 시간: $(date)\\n• 도메인: ${{ env.PROD_DOMAIN }}\\n• 워크플로우: ${{ github.workflow }}\\n• 실행 ID: ${{ github.run_id }}\"
                       }
                     },
                     {
                       \"type\": \"section\",
                       \"text\": {
                         \"type\": \"mrkdwn\",
                         \"text\": \"*체크 결과:*\\n• 홈: HTTP ${{ steps.check-home.outputs.status_code || 'FAIL' }}\\n• 지도: HTTP ${{ steps.check-map.outputs.status_code || 'FAIL' }}\\n• 헬스: ${{ steps.check-health.outputs.health_status || 'FAIL' }}\"
                       }
                     },
                     {
                       \"type\": \"actions\",
                       \"elements\": [
                         {
                           \"type\": \"button\",
                           \"text\": {
                             \"type\": \"plain_text\",
                             \"text\": \"워크플로우 보기\"
                           },
                           \"url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                         }
                       ]
                     }
                   ]
                 }" \
                 ${{ secrets.SYNTHETIC_SLACK_WEBHOOK_URL }}
          else
            echo "⚠️ Slack 웹훅 URL이 설정되지 않아 알림을 보낼 수 없습니다"
            echo "SYNTHETIC_SLACK_WEBHOOK_URL 시크릿을 설정하세요"
          fi
          
      - name: 📧 실패 시 이메일 알림 (더미)
        if: failure()
        run: |
          echo "📧 이메일 알림 (더미 구현)"
          echo "수신자: ${{ secrets.SYNTHETIC_ALERT_EMAIL || 'ops@example.com' }}"
          echo "제목: [밋핀] Synthetic 모니터링 실패 - $(date)"
          echo "내용: 서비스 상태 확인 필요"
          echo ""
          echo "실제 구현 시 SendGrid, AWS SES 등 이메일 서비스 연동 필요"