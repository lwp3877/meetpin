name: DSAR Data Purge

on:
  schedule:
    # Run daily at 02:00 UTC (11:00 KST)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  purge-expired-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli@latest

      - name: Verify Supabase connection
        run: |
          echo "Testing Supabase connection..."
          npx supabase --help > /dev/null
          echo "✓ Supabase CLI installed"

      - name: Execute DSAR purge function
        run: |
          echo "Starting DSAR data purge..."

          # Create temporary SQL script for purging
          cat > purge_script.sql << 'EOF'
          BEGIN;

          -- Log purge operation start
          INSERT INTO admin_notifications (type, title, message, priority, metadata, created_at)
          VALUES (
            'dsar_purge',
            'DSAR 데이터 삭제 시작',
            'GDPR 규정에 따른 만료 데이터 삭제 작업을 시작합니다.',
            'normal',
            '{"trigger": "github_actions", "timestamp": "' || NOW()::text || '"}'::jsonb,
            NOW()
          );

          -- Count records before purge
          DO $$
          DECLARE
            profile_count INTEGER;
            room_count INTEGER;
            message_count INTEGER;
            total_count INTEGER;
          BEGIN
            SELECT COUNT(*) INTO profile_count FROM profiles WHERE soft_deleted = TRUE AND deleted_at < NOW();
            SELECT COUNT(*) INTO room_count FROM rooms WHERE soft_deleted = TRUE AND deleted_at < NOW();
            SELECT COUNT(*) INTO message_count FROM messages WHERE soft_deleted = TRUE AND deleted_at < NOW();
            total_count := profile_count + room_count + message_count;
            
            RAISE NOTICE 'Records to purge: profiles=%, rooms=%, messages=%, total=%', 
                         profile_count, room_count, message_count, total_count;
          END $$;

          -- Execute the purge function
          SELECT purge_expired_soft_deleted_data();

          -- Log purge operation completion
          INSERT INTO admin_notifications (type, title, message, priority, metadata, created_at)
          VALUES (
            'dsar_purge',
            'DSAR 데이터 삭제 완료',
            'GDPR 규정에 따른 만료 데이터 삭제 작업이 완료되었습니다.',
            'normal',
            '{"trigger": "github_actions", "timestamp": "' || NOW()::text || '", "success": true}'::jsonb,
            NOW()
          );

          COMMIT;
          EOF

          # Execute the purge script using psql
          echo "Executing purge script..."

          # Use curl to execute SQL via Supabase REST API
          curl -X POST "${SUPABASE_URL}/rest/v1/rpc/purge_expired_soft_deleted_data" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}' \
            --fail-with-body \
            --verbose

          echo "✓ DSAR purge completed successfully"

      - name: Cleanup
        if: always()
        run: |
          rm -f purge_script.sql
          echo "✓ Cleanup completed"

      - name: Report status
        if: failure()
        run: |
          echo "❌ DSAR purge failed. Check logs above."

          # Try to log failure (best effort)
          curl -X POST "${SUPABASE_URL}/rest/v1/admin_notifications" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            -d '{
              "type": "dsar_purge",
              "title": "DSAR 데이터 삭제 실패",
              "message": "GitHub Actions에서 GDPR 데이터 삭제 작업이 실패했습니다. 로그를 확인하세요.",
              "priority": "high",
              "metadata": {"trigger": "github_actions", "success": false}
            }' || echo "Failed to log error to database"
